{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://calculator/./src/elements.ts","webpack://calculator/./src/parser.ts","webpack://calculator/./src/solver.ts","webpack://calculator/./src/index.ts"],"sourcesContent":["export class ParsedElement {\r\n    protected constructor() { }\r\n}\r\n\r\nexport class ParsedToken {\r\n    public raw: string;\r\n\r\n    protected constructor(raw: string) {\r\n        this.raw = raw;\r\n    }\r\n}\r\n\r\nexport class ParsedNumber extends ParsedToken {\r\n    public number: number;\r\n\r\n    protected constructor(raw: string, number: number) {\r\n        super(raw);\r\n\r\n        this.number = number;\r\n    }\r\n}\r\n\r\nexport class ParsedInteger extends ParsedNumber {\r\n    public constructor(raw: string, number: number) {\r\n        super(raw, number);\r\n    }\r\n}\r\n\r\nexport class ParsedFloat extends ParsedNumber {\r\n    public constructor(raw: string, number: number) {\r\n        super(raw, number);\r\n    }\r\n}\r\n\r\nexport class ParsedOperation extends ParsedToken {\r\n    protected constructor(raw: string) {\r\n        super(raw);\r\n    }\r\n}\r\n\r\nexport class ParsedPlus extends ParsedOperation {\r\n    public constructor(raw: string) {\r\n        super(raw);\r\n    }\r\n}\r\n\r\nexport class ParsedMinus extends ParsedOperation {\r\n    public constructor(raw: string) {\r\n        super(raw);\r\n    }\r\n}\r\n\r\nexport class ParsedTimes extends ParsedOperation {\r\n    public constructor(raw: string) {\r\n        super(raw);\r\n    }\r\n}\r\n\r\nexport class ParsedDivide extends ParsedOperation {\r\n    public constructor(raw: string) {\r\n        super(raw);\r\n    }\r\n}\r\n\r\nexport class ParsedExponent extends ParsedOperation {\r\n    public constructor(raw: string) {\r\n        super(raw);\r\n    }\r\n}\r\n\r\nexport class ParsedModulo extends ParsedOperation {\r\n    public constructor(raw: string) {\r\n        super(raw);\r\n    }\r\n}\r\n\r\nexport class ParsedTree extends ParsedElement {\r\n    public children: ParsedElement[];\r\n\r\n    public constructor(children: ParsedElement[]) {\r\n        super();\r\n\r\n        this.children = children;\r\n    }\r\n}\r\n\r\nexport class ParsedFunction extends ParsedElement {\r\n    public name: string;\r\n    public args: ParsedElement[];\r\n\r\n    public constructor(name: string, args: ParsedElement[]) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.args = args;\r\n    }\r\n}","import * as Elements from \"./elements\";\r\n\r\nexport default class Parser {\r\n    protected string: string;\r\n    protected pointer: number;\r\n\r\n    public constructor(string: string) {\r\n        this.string = string;\r\n        this.pointer = 0;\r\n    }\r\n\r\n    public parse(): Elements.ParsedTree {\r\n        let tree: Elements.ParsedTree = new Elements.ParsedTree([]);\r\n\r\n        while (this.hasNext()) {\r\n            let char: string = this.readNext();\r\n            let charCode: number = char.charCodeAt(0);\r\n\r\n            if (charCode <= 32) { // Invisible character / space / newline\r\n                continue;\r\n            }\r\n\r\n            if (charCode === 40) { // Opening parenthesis\r\n                let parenthesis: string = \"\";\r\n                let hasClosing = false;\r\n                let childParenthesisCount: number = 0;\r\n\r\n                while (this.hasNext()) {\r\n                    let nextChar = this.peekNext();\r\n                    let nextCharCode: number = nextChar.charCodeAt(0);\r\n\r\n                    if (nextCharCode !== 41) { // Not closing parenthesis\r\n                        this.consumeNext();\r\n\r\n                        parenthesis += nextChar;\r\n                        if (nextCharCode === 40) {\r\n                            childParenthesisCount++;\r\n                        }\r\n                    } else {\r\n                        childParenthesisCount--;\r\n                        this.consumeNext();\r\n\r\n                        if (childParenthesisCount < 0) {\r\n                            hasClosing = true;\r\n\r\n                            break;\r\n                        } else {\r\n                            parenthesis += nextChar; // For sub-parenthesis\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!hasClosing) {\r\n                    throw new Error(\"Syntax error (Missing closing parenthesis)\");\r\n                }\r\n\r\n                let childParser: Parser = new Parser(parenthesis); // Recursive parsing\r\n                tree.children.push(new Elements.ParsedTree(childParser.parse().children));\r\n            } else if ((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)) { // A-Z a-z\r\n                let name: string = char;\r\n                let doneName = false;\r\n                let argC = 1;\r\n                let args: string[] = [\"\"];\r\n                let hasClosing = false;\r\n                let childParenthesisCount: number = 0;\r\n\r\n                while (this.hasNext() && !doneName) {\r\n                    let nextChar = this.peekNext();\r\n                    let nextCharCode: number = nextChar.charCodeAt(0);\r\n\r\n                    if ((nextCharCode >= 65 && nextCharCode <= 90) || (nextCharCode >= 97 && nextCharCode <= 122) || (nextCharCode >= 48 && nextCharCode <= 57) || nextCharCode === 46) { // Not closing parenthesis\r\n                        this.consumeNext();\r\n\r\n                        name += nextChar;\r\n                    } else {\r\n                        this.consumeNext();\r\n\r\n                        doneName = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                while (this.hasNext()) {\r\n                    let nextChar = this.peekNext();\r\n                    let nextCharCode: number = nextChar.charCodeAt(0);\r\n\r\n                    if (nextCharCode === 44) { // Comma\r\n                        this.consumeNext();\r\n\r\n                        argC++;\r\n                        args[argC - 1] = \"\";\r\n                    } else if (nextCharCode !== 41) { // Not closing parenthesis\r\n                        this.consumeNext();\r\n\r\n                        args[argC - 1] += nextChar;\r\n                        if (nextCharCode === 40) {\r\n                            childParenthesisCount++;\r\n                        }\r\n                    } else {\r\n                        childParenthesisCount--;\r\n                        this.consumeNext();\r\n\r\n                        if (childParenthesisCount < 0) {\r\n                            hasClosing = true;\r\n\r\n                            break;\r\n                        } else {\r\n                            args[argC - 1] += nextChar; // For sub-parenthesis\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!hasClosing) {\r\n                    throw new Error(\"Syntax error (Missing closing parenthesis)\");\r\n                }\r\n\r\n                let parsedArgs: Elements.ParsedTree[] = [];\r\n\r\n                for (let child of args) {\r\n                    let childParser: Parser = new Parser(child); // Recursive parsing\r\n                    parsedArgs.push(childParser.parse());\r\n                }\r\n\r\n                tree.children.push(new Elements.ParsedFunction(name, parsedArgs));\r\n            } else if ((charCode >= 48 && charCode <= 57) || charCode === 46) { // Number, decimal point\r\n                let num: string = char;\r\n                let isFloat: boolean = false;\r\n\r\n                while (this.hasNext()) {\r\n                    let nextChar = this.peekNext();\r\n                    let nextCharCode: number = nextChar.charCodeAt(0);\r\n\r\n                    if ((nextCharCode >= 48 && nextCharCode <= 57) || nextCharCode === 46) { // Number, decimal point\r\n                        this.consumeNext();\r\n\r\n                        num += nextChar;\r\n                        if (nextCharCode === 46) {\r\n                            isFloat = true;\r\n                        }\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!isFloat) {\r\n                    let parsedNum: number = parseInt(num);\r\n                    tree.children.push(new Elements.ParsedInteger(num, parsedNum));\r\n                } else {\r\n                    let parsedNum: number = parseFloat(num);\r\n                    tree.children.push(new Elements.ParsedFloat(num, parsedNum));\r\n                }\r\n            } else if (charCode === 43) { // Plus\r\n                tree.children.push(new Elements.ParsedPlus(char));\r\n            } else if (charCode === 45) { // Minus\r\n                tree.children.push(new Elements.ParsedMinus(char));\r\n            } else if (charCode === 42) { // Times\r\n                tree.children.push(new Elements.ParsedTimes(char));\r\n            } else if (charCode === 47) { // Divide\r\n                tree.children.push(new Elements.ParsedDivide(char));\r\n            } else if (charCode === 94) { // Exponent\r\n                tree.children.push(new Elements.ParsedExponent(char));\r\n            } else if (charCode === 37) { // Modulo\r\n                tree.children.push(new Elements.ParsedModulo(char));\r\n            } else {\r\n                throw new Error(\"Invalid/unknown character '\" + char + \"'\" + (charCode === 41 ? \" (Mismatched parenthesis)\" : \"\"));\r\n            }\r\n        }\r\n\r\n        return tree;\r\n    }\r\n\r\n    protected hasNext(): boolean {\r\n        return this.pointer < this.string.length;\r\n    }\r\n\r\n    protected readNext(): string {\r\n        this.pointer++;\r\n        return this.string[this.pointer - 1]!!;\r\n    }\r\n\r\n    protected peekNext(): string {\r\n        return this.string[this.pointer]!!;\r\n    }\r\n\r\n    protected consumeNext(): void {\r\n        this.pointer++;\r\n    }\r\n}","import * as Elements from \"./elements\";\r\n\r\nexport default class Solver {\r\n    protected static ORDER_OF_OPERATIONS: string[][] = [[Elements.ParsedExponent.name], [Elements.ParsedTimes.name, Elements.ParsedDivide.name, Elements.ParsedModulo.name], [Elements.ParsedPlus.name, Elements.ParsedMinus.name]];\r\n\r\n    protected static FUNCTIONS: {\r\n        [propName: string]: Function;\r\n    } = {\r\n            \"abs\": Solver.wrapMethod(Math.abs, 1), // absolute value\r\n            \"sign\": Solver.wrapMethod(Math.sign, 1), // sign (1, -1)\r\n\r\n            \"max\": Solver.wrapMethod(Math.max, \"any\"), // largest number\r\n            \"min\": Solver.wrapMethod(Math.min, \"any\"), // smallest number\r\n            \"clamp\": Solver.wrapMethod((x: number, min: number, max: number): number => {\r\n                return Math.max(Math.min(x, max), min);\r\n            }, 3), // clamp to range\r\n            \"floor\": Solver.wrapMethod(Math.floor, 1), // round down\r\n            \"ceil\": Solver.wrapMethod(Math.ceil, 1), // round up\r\n            \"round\": Solver.wrapMethod(Math.round, 1), // round\r\n\r\n            \"pow\": Solver.wrapMethod(Math.pow, 2), // x^y\r\n            \"exp\": Solver.wrapMethod(Math.exp, 1), // e^x\r\n            \"expm1\": Solver.wrapMethod(Math.exp, 1), // (e^x)-1,\r\n\r\n            \"sqrt\": Solver.wrapMethod(Math.sqrt, 1), // square root\r\n            \"cbrt\": Solver.wrapMethod(Math.cbrt, 1), // cube root\r\n\r\n            \"sin\": Solver.wrapMethod(Math.sin, 1), // sine\r\n            \"sinh\": Solver.wrapMethod(Math.sinh, 1), // hyperbolic sine\r\n            \"asin\": Solver.wrapMethod(Math.asin, 1), // inverse sine\r\n            \"asinh\": Solver.wrapMethod(Math.asinh, 1), // inverse hyperbolic sine\r\n\r\n            \"cos\": Solver.wrapMethod(Math.cos, 1), // cosine\r\n            \"cosh\": Solver.wrapMethod(Math.cosh, 1), // hyperbolic cosine\r\n            \"acos\": Solver.wrapMethod(Math.acos, 1), // inverse cosine\r\n            \"acosh\": Solver.wrapMethod(Math.acosh, 1), // inverse hyperbolic cosine\r\n\r\n            \"tan\": Solver.wrapMethod(Math.tan, 1), // tangent\r\n            \"tanh\": Solver.wrapMethod(Math.tanh, 1), // hyperbolic tangent\r\n            \"atan\": Solver.wrapMethod(Math.floor, 1), // inverse tangent\r\n            \"atan2\": Solver.wrapMethod(Math.floor, 1), // angle between 0,0 and x,y\r\n            \"atanh\": Solver.wrapMethod(Math.floor, 1), // inverse hyperbolic tangent\r\n\r\n            \"log\": Solver.wrapMethod(Math.log, 1), // natural logarithm\r\n            \"log2\": Solver.wrapMethod(Math.log2, 1), // base 2 logarithm\r\n            \"log10\": Solver.wrapMethod(Math.log10, 1), // base 10 logarithm\r\n            \"log1p\": Solver.wrapMethod(Math.log1p, 1), // log(1+x)\r\n\r\n            \"random\": Solver.wrapMethods(Math.random, (x: number): number => {\r\n                return Math.random() * x;\r\n            }, 0, 1), // random\r\n\r\n            \"hypot\": Solver.wrapMethod(Math.hypot, \"any\") // square root of the sum of squares of arguments\r\n        };\r\n\r\n    protected static wrapMethod(method: Function, argC: number | \"any\"): Function {\r\n        return (args: any[]) => {\r\n            if (args.length == argC || argC == \"any\") {\r\n                return method(...args);\r\n            } else {\r\n                throw new Error(\"Incorrect number of args\");\r\n            }\r\n        }\r\n    }\r\n\r\n    protected static wrapMethods(method1: Function, method2: Function, arg1C: number, arg2C: number | \"any\"): Function {\r\n        return (args: any[]) => {\r\n            if (args.length == arg1C) {\r\n                return method1(...args);\r\n            } else if (args.length == arg2C || arg2C == \"any\") {\r\n                return method2(...args);\r\n            } else {\r\n                throw new Error(\"Incorrect number of args\");\r\n            }\r\n        }\r\n    }\r\n\r\n    protected tree: Elements.ParsedTree;\r\n\r\n    public constructor(tree: Elements.ParsedTree) {\r\n        this.tree = tree;\r\n    }\r\n\r\n    public solve(): number {\r\n        if (this.tree.children.length == 0) { // Empty equation\r\n            return 0;\r\n        }\r\n\r\n        for (let pointer = 0; pointer < this.tree.children.length; pointer++) { // Parse parenthesis\r\n            if (this.tree.children[pointer] instanceof Elements.ParsedTree) {\r\n                let childTree = this.tree.children[pointer] as Elements.ParsedTree;\r\n\r\n                let solver: Solver = new Solver(childTree);\r\n                this.tree.children[pointer] = new Elements.ParsedFloat(\"()\", solver.solve());\r\n            } else if (this.tree.children[pointer] instanceof Elements.ParsedFunction) {\r\n                let childTree = this.tree.children[pointer] as Elements.ParsedFunction;\r\n\r\n                for (let pointer = 0; pointer < childTree.args.length; pointer++) { // Parse parenthesis\r\n                    if (childTree.args[pointer] instanceof Elements.ParsedTree) {\r\n                        let subChildTree = childTree.args[pointer] as Elements.ParsedTree;\r\n\r\n                        let solver: Solver = new Solver(subChildTree);\r\n                        childTree.args[pointer] = new Elements.ParsedFloat(\"()\", solver.solve());\r\n                    }\r\n                }\r\n\r\n                let method = Solver.FUNCTIONS[childTree.name];\r\n                if (method === undefined) {\r\n                    throw new Error(\"Unknown function '\" + childTree.name + \"'\");\r\n                }\r\n\r\n                let args: number[] = [];\r\n                for (let arg of childTree.args) {\r\n                    args.push((arg as Elements.ParsedNumber).number);\r\n                }\r\n\r\n                let result = method(args);\r\n                this.tree.children[pointer] = new Elements.ParsedFloat(\"()\", result);\r\n            }\r\n        }\r\n\r\n        for (let operations of Solver.ORDER_OF_OPERATIONS) { // Parse equations\r\n            for (let pointer = 0; pointer < this.tree.children.length; pointer++) {\r\n                if (this.tree.children[pointer] instanceof Elements.ParsedOperation) {\r\n                    let n1 = this.tree.children[pointer - 1];\r\n                    let n2 = this.tree.children[pointer + 1];\r\n                    let operation = this.tree.children[pointer] as Elements.ParsedOperation;\r\n\r\n                    if (n1 instanceof Elements.ParsedNumber && n2 instanceof Elements.ParsedNumber) {\r\n                        if (operations.includes(operation.constructor.name)) {\r\n                            if (operation instanceof Elements.ParsedPlus) {\r\n                                this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number + n2.number);\r\n                                this.tree.children.splice(pointer, 2);\r\n                                pointer--;\r\n                            } else if (operation instanceof Elements.ParsedMinus) {\r\n                                this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number - n2.number);\r\n                                this.tree.children.splice(pointer, 2);\r\n                                pointer--;\r\n                            } else if (operation instanceof Elements.ParsedTimes) {\r\n                                this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number * n2.number);\r\n                                this.tree.children.splice(pointer, 2);\r\n                                pointer--;\r\n                            } else if (operation instanceof Elements.ParsedDivide) {\r\n                                this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number / n2.number);\r\n                                this.tree.children.splice(pointer, 2);\r\n                                pointer--;\r\n                            } else if (operation instanceof Elements.ParsedExponent) {\r\n                                this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number ** n2.number);\r\n                                this.tree.children.splice(pointer, 2);\r\n                                pointer--;\r\n                            } else if (operation instanceof Elements.ParsedModulo) {\r\n                                this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number % n2.number);\r\n                                this.tree.children.splice(pointer, 2);\r\n                                pointer--;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        throw new Error(\"Syntax error (Operator must be passed two numbers)\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.tree.children.length !== 1) {\r\n            throw new Error(\"Syntax error (Missing equation)\");\r\n        }\r\n\r\n        if (this.tree.children[0] instanceof Elements.ParsedNumber) {\r\n            return this.tree.children[0].number;\r\n        } else {\r\n            throw new Error(\"Syntax error (Missing numbers)\");\r\n        }\r\n    }\r\n}","import * as Elements from \"./elements\";\r\nimport Parser from \"./parser\";\r\nimport Solver from \"./solver\";\r\n\r\nclass Instance {\r\n    protected rootElement: HTMLDivElement;\r\n\r\n    protected inputElement: HTMLInputElement;\r\n    protected outputElement: HTMLSpanElement;\r\n\r\n    public constructor() {\r\n        this.rootElement = document.querySelector(\"#calculator\") as HTMLDivElement;\r\n\r\n        this.inputElement = this.rootElement.querySelector(\".calculator_input\") as HTMLInputElement;\r\n        this.outputElement = this.rootElement.querySelector(\".calculator_output\") as HTMLSpanElement;\r\n    }\r\n\r\n    public init(): void {\r\n        this.inputElement.addEventListener(\"keydown\", (event: KeyboardEvent): void => {\r\n            let key: string = event.key.toLowerCase();\r\n\r\n            if (key === \"enter\") {\r\n                this.calculate();\r\n            }\r\n        });\r\n\r\n        this.calculate();\r\n    }\r\n\r\n    public calculate(): void {\r\n        try {\r\n            console.log(\"Input\", this.inputElement.value);\r\n\r\n            let parser: Parser = new Parser(this.inputElement.value);\r\n            let tree: Elements.ParsedTree = parser.parse();\r\n\r\n            console.log(\"Parsed\", JSON.stringify(tree, null, 2));\r\n\r\n            let solver: Solver = new Solver(tree);\r\n            let result: number = solver.solve();\r\n\r\n            console.log(\"Solved\", result.toString());\r\n\r\n            this.outputElement.innerText = result.toString();\r\n        } catch (e: any) {\r\n            this.outputElement.innerText = \"ERR\";\r\n\r\n            console.warn(e);\r\n        }\r\n    }\r\n}\r\n\r\nlet instance = new Instance();\r\ninstance.init();  "],"names":[],"sourceRoot":""}