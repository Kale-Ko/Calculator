{"version":3,"file":"index.js","mappings":"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","sources":["webpack://calculator/./src/index.ts"],"sourcesContent":["namespace Calculator {\r\n    export namespace Elements {\r\n        export class ParsedElement {\r\n            protected constructor() { }\r\n        }\r\n\r\n        export class ParsedToken {\r\n            public raw: string;\r\n\r\n            protected constructor(raw: string) {\r\n                this.raw = raw;\r\n            }\r\n        }\r\n\r\n        export class ParsedNumber extends ParsedToken {\r\n            public number: number;\r\n\r\n            protected constructor(raw: string, number: number) {\r\n                super(raw);\r\n\r\n                this.number = number;\r\n            }\r\n        }\r\n\r\n        export class ParsedInteger extends ParsedNumber {\r\n            public constructor(raw: string, number: number) {\r\n                super(raw, number);\r\n            }\r\n        }\r\n\r\n        export class ParsedFloat extends ParsedNumber {\r\n            public constructor(raw: string, number: number) {\r\n                super(raw, number);\r\n            }\r\n        }\r\n\r\n        export class ParsedOperation extends ParsedToken {\r\n            protected constructor(raw: string) {\r\n                super(raw);\r\n            }\r\n        }\r\n\r\n        export class ParsedPlus extends ParsedOperation {\r\n            public constructor(raw: string) {\r\n                super(raw);\r\n            }\r\n        }\r\n\r\n        export class ParsedMinus extends ParsedOperation {\r\n            public constructor(raw: string) {\r\n                super(raw);\r\n            }\r\n        }\r\n\r\n        export class ParsedTimes extends ParsedOperation {\r\n            public constructor(raw: string) {\r\n                super(raw);\r\n            }\r\n        }\r\n\r\n        export class ParsedDivide extends ParsedOperation {\r\n            public constructor(raw: string) {\r\n                super(raw);\r\n            }\r\n        }\r\n\r\n        export class ParsedExponent extends ParsedOperation {\r\n            public constructor(raw: string) {\r\n                super(raw);\r\n            }\r\n        }\r\n\r\n        export class ParsedModulo extends ParsedOperation {\r\n            public constructor(raw: string) {\r\n                super(raw);\r\n            }\r\n        }\r\n\r\n        export class ParsedTree extends ParsedElement {\r\n            public children: ParsedElement[];\r\n\r\n            public constructor(children: ParsedElement[]) {\r\n                super();\r\n\r\n                this.children = children;\r\n            }\r\n        }\r\n\r\n        export class ParsedFunction extends ParsedElement {\r\n            public name: string;\r\n            public args: ParsedElement[];\r\n\r\n            public constructor(name: string, args: ParsedElement[]) {\r\n                super();\r\n\r\n                this.name = name;\r\n                this.args = args;\r\n            }\r\n        }\r\n    }\r\n\r\n    export class Parser {\r\n        protected string: string;\r\n        protected pointer: number;\r\n\r\n        public constructor(string: string) {\r\n            this.string = string;\r\n            this.pointer = 0;\r\n        }\r\n\r\n        public parse(): Elements.ParsedTree {\r\n            let tree: Elements.ParsedTree = new Elements.ParsedTree([]);\r\n\r\n            while (this.hasNext()) {\r\n                let char: string = this.readNext();\r\n                let charCode: number = char.charCodeAt(0);\r\n\r\n                if (charCode <= 32) { // Invisible character / space / newline\r\n                    continue;\r\n                }\r\n\r\n                if (charCode === 40 && Settings.parenthesisEnabled) { // Opening parenthesis\r\n                    let parenthesis: string = \"\";\r\n                    let hasClosing = false;\r\n                    let childParenthesisCount: number = 0;\r\n\r\n                    while (this.hasNext()) {\r\n                        let nextChar = this.peekNext();\r\n                        let nextCharCode: number = nextChar.charCodeAt(0);\r\n\r\n                        if (nextCharCode !== 41) { // Not closing parenthesis\r\n                            this.consumeNext();\r\n\r\n                            parenthesis += nextChar;\r\n                            if (nextCharCode === 40) {\r\n                                childParenthesisCount++;\r\n                            }\r\n                        } else {\r\n                            childParenthesisCount--;\r\n                            this.consumeNext();\r\n\r\n                            if (childParenthesisCount < 0) {\r\n                                hasClosing = true;\r\n\r\n                                break;\r\n                            } else {\r\n                                parenthesis += nextChar; // For sub-parenthesis\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!hasClosing) {\r\n                        throw new Error(\"Syntax error (Missing closing parenthesis)\");\r\n                    }\r\n\r\n                    let childParser: Parser = new Parser(parenthesis); // Recursive parsing\r\n                    tree.children.push(new Elements.ParsedTree(childParser.parse().children));\r\n                } else if (((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)) && Settings.parenthesisEnabled && Settings.functionsEnabled) { // A-Z a-z\r\n                    let name: string = char;\r\n                    let doneName = false;\r\n                    let argC = 1;\r\n                    let args: string[] = [\"\"];\r\n                    let hasClosing = false;\r\n                    let childParenthesisCount: number = 0;\r\n\r\n                    while (this.hasNext() && !doneName) {\r\n                        let nextChar = this.peekNext();\r\n                        let nextCharCode: number = nextChar.charCodeAt(0);\r\n\r\n                        if ((nextCharCode >= 65 && nextCharCode <= 90) || (nextCharCode >= 97 && nextCharCode <= 122) || (nextCharCode >= 48 && nextCharCode <= 57) || nextCharCode === 46) { // Not closing parenthesis\r\n                            this.consumeNext();\r\n\r\n                            name += nextChar;\r\n                        } else {\r\n                            this.consumeNext();\r\n\r\n                            doneName = true;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    while (this.hasNext()) {\r\n                        let nextChar = this.peekNext();\r\n                        let nextCharCode: number = nextChar.charCodeAt(0);\r\n\r\n                        if (nextCharCode === 44) { // Comma\r\n                            this.consumeNext();\r\n\r\n                            argC++;\r\n                            args[argC - 1] = \"\";\r\n                        } else if (nextCharCode !== 41) { // Not closing parenthesis\r\n                            this.consumeNext();\r\n\r\n                            args[argC - 1] += nextChar;\r\n                            if (nextCharCode === 40) {\r\n                                childParenthesisCount++;\r\n                            }\r\n                        } else {\r\n                            childParenthesisCount--;\r\n                            this.consumeNext();\r\n\r\n                            if (childParenthesisCount < 0) {\r\n                                hasClosing = true;\r\n\r\n                                break;\r\n                            } else {\r\n                                args[argC - 1] += nextChar; // For sub-parenthesis\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!hasClosing) {\r\n                        throw new Error(\"Syntax error (Missing closing parenthesis)\");\r\n                    }\r\n\r\n                    let parsedArgs: Elements.ParsedTree[] = [];\r\n\r\n                    for (let child of args) {\r\n                        let childParser: Parser = new Parser(child); // Recursive parsing\r\n                        parsedArgs.push(childParser.parse());\r\n                    }\r\n\r\n                    tree.children.push(new Elements.ParsedFunction(name, parsedArgs));\r\n                } else if ((charCode >= 48 && charCode <= 57) || charCode === 46) { // Number, decimal point\r\n                    let num: string = char;\r\n                    let isFloat: boolean = false;\r\n\r\n                    while (this.hasNext()) {\r\n                        let nextChar = this.peekNext();\r\n                        let nextCharCode: number = nextChar.charCodeAt(0);\r\n\r\n                        if ((nextCharCode >= 48 && nextCharCode <= 57) || nextCharCode === 46) { // Number, decimal point\r\n                            this.consumeNext();\r\n\r\n                            num += nextChar;\r\n                            if (nextCharCode === 46) {\r\n                                isFloat = true;\r\n                            }\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (!isFloat) {\r\n                        let parsedNum: number = parseInt(num);\r\n                        tree.children.push(new Elements.ParsedInteger(num, parsedNum));\r\n                    } else {\r\n                        let parsedNum: number = parseFloat(num);\r\n                        tree.children.push(new Elements.ParsedFloat(num, parsedNum));\r\n                    }\r\n                } else if (charCode === 43) { // Plus\r\n                    tree.children.push(new Elements.ParsedPlus(char));\r\n                } else if (charCode === 45) { // Minus\r\n                    tree.children.push(new Elements.ParsedMinus(char));\r\n                } else if (charCode === 42) { // Times\r\n                    tree.children.push(new Elements.ParsedTimes(char));\r\n                } else if (charCode === 47) { // Divide\r\n                    tree.children.push(new Elements.ParsedDivide(char));\r\n                } else if (charCode === 94) { // Exponent\r\n                    tree.children.push(new Elements.ParsedExponent(char));\r\n                } else if (charCode === 37) { // Modulo\r\n                    tree.children.push(new Elements.ParsedModulo(char));\r\n                } else {\r\n                    throw new Error(\"Invalid/unknown character '\" + char + \"'\" + (charCode === 41 ? \" (Mismatched parenthesis)\" : \"\"));\r\n                }\r\n            }\r\n\r\n            return tree;\r\n        }\r\n\r\n        protected hasNext(): boolean {\r\n            return this.pointer < this.string.length;\r\n        }\r\n\r\n        protected readNext(): string {\r\n            this.pointer++;\r\n            return this.string[this.pointer - 1]!!;\r\n        }\r\n\r\n        protected peekNext(): string {\r\n            return this.string[this.pointer]!!;\r\n        }\r\n\r\n        protected consumeNext(): void {\r\n            this.pointer++;\r\n        }\r\n    }\r\n\r\n    export class Solver {\r\n        protected static ORDER_OF_OPERATIONS_CORRECT: string[][] = [[Elements.ParsedExponent.name], [Elements.ParsedTimes.name, Elements.ParsedDivide.name, Elements.ParsedModulo.name], [Elements.ParsedPlus.name, Elements.ParsedMinus.name]];\r\n        protected static ORDER_OF_OPERATIONS_SIMPLE: string[][] = [[Elements.ParsedExponent.name], [Elements.ParsedTimes.name], [Elements.ParsedDivide.name], [Elements.ParsedModulo.name], [Elements.ParsedPlus.name], [Elements.ParsedMinus.name]];\r\n\r\n        protected static FUNCTIONS: {\r\n            [propName: string]: Function;\r\n        } = {\r\n                \"abs\": Solver.wrapMethod(Math.abs, 1), // absolute value\r\n                \"sign\": Solver.wrapMethod(Math.sign, 1), // sign (1, -1)\r\n\r\n                \"max\": Solver.wrapMethod(Math.max, \"any\"), // largest number\r\n                \"min\": Solver.wrapMethod(Math.min, \"any\"), // smallest number\r\n                \"clamp\": Solver.wrapMethod((x: number, min: number, max: number): number => {\r\n                    return Math.max(Math.min(x, max), min);\r\n                }, 3), // clamp to range\r\n                \"floor\": Solver.wrapMethod(Math.floor, 1), // round down\r\n                \"ceil\": Solver.wrapMethod(Math.ceil, 1), // round up\r\n                \"round\": Solver.wrapMethod(Math.round, 1), // round\r\n\r\n                \"pow\": Solver.wrapMethod(Math.pow, 2), // x^y\r\n                \"exp\": Solver.wrapMethod(Math.exp, 1), // e^x\r\n                \"expm1\": Solver.wrapMethod(Math.exp, 1), // (e^x)-1,\r\n\r\n                \"sqrt\": Solver.wrapMethod(Math.sqrt, 1), // square root\r\n                \"cbrt\": Solver.wrapMethod(Math.cbrt, 1), // cube root\r\n\r\n                \"sin\": Solver.wrapMethod(Math.sin, 1), // sine\r\n                \"sinh\": Solver.wrapMethod(Math.sinh, 1), // hyperbolic sine\r\n                \"asin\": Solver.wrapMethod(Math.asin, 1), // inverse sine\r\n                \"asinh\": Solver.wrapMethod(Math.asinh, 1), // inverse hyperbolic sine\r\n\r\n                \"cos\": Solver.wrapMethod(Math.cos, 1), // cosine\r\n                \"cosh\": Solver.wrapMethod(Math.cosh, 1), // hyperbolic cosine\r\n                \"acos\": Solver.wrapMethod(Math.acos, 1), // inverse cosine\r\n                \"acosh\": Solver.wrapMethod(Math.acosh, 1), // inverse hyperbolic cosine\r\n\r\n                \"tan\": Solver.wrapMethod(Math.tan, 1), // tangent\r\n                \"tanh\": Solver.wrapMethod(Math.tanh, 1), // hyperbolic tangent\r\n                \"atan\": Solver.wrapMethod(Math.floor, 1), // inverse tangent\r\n                \"atan2\": Solver.wrapMethod(Math.floor, 1), // angle between 0,0 and x,y\r\n                \"atanh\": Solver.wrapMethod(Math.floor, 1), // inverse hyperbolic tangent\r\n\r\n                \"log\": Solver.wrapMethod(Math.log, 1), // natural logarithm\r\n                \"log2\": Solver.wrapMethod(Math.log2, 1), // base 2 logarithm\r\n                \"log10\": Solver.wrapMethod(Math.log10, 1), // base 10 logarithm\r\n                \"log1p\": Solver.wrapMethod(Math.log1p, 1), // log(1+x)\r\n\r\n                \"random\": Solver.wrapMethods(Math.random, (x: number): number => {\r\n                    return Math.random() * x;\r\n                }, 0, 1), // random\r\n\r\n                \"hypot\": Solver.wrapMethod(Math.hypot, \"any\") // square root of the sum of squares of arguments\r\n            };\r\n\r\n        protected static wrapMethod(method: Function, argC: number | \"any\"): Function {\r\n            return (args: any[]) => {\r\n                if (args.length == argC || argC == \"any\") {\r\n                    return method(...args);\r\n                } else {\r\n                    throw new Error(\"Incorrect number of args\");\r\n                }\r\n            }\r\n        }\r\n\r\n        protected static wrapMethods(method1: Function, method2: Function, arg1C: number, arg2C: number | \"any\"): Function {\r\n            return (args: any[]) => {\r\n                if (args.length == arg1C) {\r\n                    return method1(...args);\r\n                } else if (args.length == arg2C || arg2C == \"any\") {\r\n                    return method2(...args);\r\n                } else {\r\n                    throw new Error(\"Incorrect number of args\");\r\n                }\r\n            }\r\n        }\r\n\r\n        protected tree: Elements.ParsedTree;\r\n\r\n        public constructor(tree: Elements.ParsedTree) {\r\n            this.tree = tree;\r\n        }\r\n\r\n        public solve(): number {\r\n            if (this.tree.children.length == 0) { // Empty equation\r\n                return 0;\r\n            }\r\n\r\n            for (let pointer = 0; pointer < this.tree.children.length; pointer++) { // Parse parenthesis\r\n                if (this.tree.children[pointer] instanceof Elements.ParsedTree) {\r\n                    let childTree = this.tree.children[pointer] as Elements.ParsedTree;\r\n\r\n                    let solver: Solver = new Solver(childTree);\r\n                    this.tree.children[pointer] = new Elements.ParsedFloat(\"()\", solver.solve());\r\n                } else if (this.tree.children[pointer] instanceof Elements.ParsedFunction) {\r\n                    let childTree = this.tree.children[pointer] as Elements.ParsedFunction;\r\n\r\n                    for (let pointer = 0; pointer < childTree.args.length; pointer++) { // Parse parenthesis\r\n                        if (childTree.args[pointer] instanceof Elements.ParsedTree) {\r\n                            let subChildTree = childTree.args[pointer] as Elements.ParsedTree;\r\n\r\n                            let solver: Solver = new Solver(subChildTree);\r\n                            childTree.args[pointer] = new Elements.ParsedFloat(\"()\", solver.solve());\r\n                        }\r\n                    }\r\n\r\n                    let method = Solver.FUNCTIONS[childTree.name];\r\n                    if (method === undefined) {\r\n                        throw new Error(\"Unknown function '\" + childTree.name + \"'\");\r\n                    }\r\n\r\n                    let args: number[] = [];\r\n                    for (let arg of childTree.args) {\r\n                        args.push((arg as Elements.ParsedNumber).number);\r\n                    }\r\n\r\n                    let result = method(args);\r\n                    this.tree.children[pointer] = new Elements.ParsedFloat(\"()\", result);\r\n                }\r\n            }\r\n\r\n            for (let operations of (Settings.orderOfOperationsMode === \"simple\" ? Solver.ORDER_OF_OPERATIONS_SIMPLE : Solver.ORDER_OF_OPERATIONS_CORRECT)) { // Parse equations\r\n                for (let pointer = 0; pointer < this.tree.children.length; pointer++) {\r\n                    if (this.tree.children[pointer] instanceof Elements.ParsedOperation) {\r\n                        let n1 = this.tree.children[pointer - 1];\r\n                        let n2 = this.tree.children[pointer + 1];\r\n                        let operation = this.tree.children[pointer] as Elements.ParsedOperation;\r\n\r\n                        if (n1 instanceof Elements.ParsedNumber && n2 instanceof Elements.ParsedNumber) {\r\n                            if (operations.includes(operation.constructor.name)) {\r\n                                if (operation instanceof Elements.ParsedPlus) {\r\n                                    this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number + n2.number);\r\n                                    this.tree.children.splice(pointer, 2);\r\n                                    pointer--;\r\n                                } else if (operation instanceof Elements.ParsedMinus) {\r\n                                    this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number - n2.number);\r\n                                    this.tree.children.splice(pointer, 2);\r\n                                    pointer--;\r\n                                } else if (operation instanceof Elements.ParsedTimes) {\r\n                                    this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number * n2.number);\r\n                                    this.tree.children.splice(pointer, 2);\r\n                                    pointer--;\r\n                                } else if (operation instanceof Elements.ParsedDivide) {\r\n                                    this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number / n2.number);\r\n                                    this.tree.children.splice(pointer, 2);\r\n                                    pointer--;\r\n                                } else if (operation instanceof Elements.ParsedExponent) {\r\n                                    this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number ** n2.number);\r\n                                    this.tree.children.splice(pointer, 2);\r\n                                    pointer--;\r\n                                } else if (operation instanceof Elements.ParsedModulo) {\r\n                                    this.tree.children[pointer - 1] = new Elements.ParsedFloat(n1.raw + \" \" + operation.raw + \" \" + n2.raw, n1.number % n2.number);\r\n                                    this.tree.children.splice(pointer, 2);\r\n                                    pointer--;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            throw new Error(\"Syntax error (Operator must be passed two numbers)\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.tree.children.length !== 1) {\r\n                throw new Error(\"Syntax error (Missing equation)\");\r\n            }\r\n\r\n            if (this.tree.children[0] instanceof Elements.ParsedNumber) {\r\n                return this.tree.children[0].number;\r\n            } else {\r\n                throw new Error(\"Syntax error (Missing numbers)\");\r\n            }\r\n        }\r\n    }\r\n\r\n    export class Instance {\r\n        protected rootElement: HTMLDivElement;\r\n\r\n        protected inputElement: HTMLInputElement;\r\n        protected outputElement: HTMLSpanElement;\r\n\r\n        public constructor() {\r\n            this.rootElement = document.querySelector(\"#calculator\") as HTMLDivElement;\r\n\r\n            this.inputElement = this.rootElement.querySelector(\".calculator_input\") as HTMLInputElement;\r\n            this.outputElement = this.rootElement.querySelector(\".calculator_output\") as HTMLSpanElement;\r\n        }\r\n\r\n        public init(): void {\r\n            this.inputElement.addEventListener(\"keydown\", (event: KeyboardEvent): void => {\r\n                let key: string = event.key.toLowerCase();\r\n\r\n                if (key === \"enter\") {\r\n                    this.calculate();\r\n                }\r\n            });\r\n\r\n            this.calculate();\r\n        }\r\n\r\n        public calculate(): void {\r\n            try {\r\n                console.log(\"Input\", this.inputElement.value);\r\n\r\n                let parser: Parser = new Parser(this.inputElement.value);\r\n                let tree: Elements.ParsedTree = parser.parse();\r\n\r\n                console.log(\"Parsed\", JSON.stringify(tree, null, 2));\r\n\r\n                let solver: Solver = new Solver(tree);\r\n                let result: number = solver.solve();\r\n\r\n                console.log(\"Solved\", result.toString());\r\n\r\n                this.outputElement.innerText = result.toString();\r\n            } catch (e: any) {\r\n                this.outputElement.innerText = \"ERR\";\r\n\r\n                console.warn(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    type OrderOfOperationsMode = \"correct\" | \"simple\";\r\n    export class Settings {\r\n        static parenthesisEnabled: boolean = true;\r\n        static functionsEnabled: boolean = true;\r\n        static orderOfOperationsMode: OrderOfOperationsMode = \"correct\";\r\n    }\r\n}\r\nwindow.Calculator = Calculator;\r\n\r\nlet instance = new Calculator.Instance();\r\ninstance.init();"],"names":[],"sourceRoot":""}